{"version":3,"sources":["at_test.coffee"],"names":[],"mappings":"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","file":"at_test.js","sourceRoot":"../../test","sourcesContent":["#move require command to mocha option file\n#move mock file in mocha test file\nshould = require 'should'\nsinon = require 'sinon'\nrequire 'should-sinon'\nfs = require 'fs'\nprocess.chdir(__dirname)\nbeforeEach ->\n   delete require.cache[k] for k of require.cache\ndescribe \"at\", ->\n   core_files = [\"at_require\", \"at_load\"]\n   supp_files = [\"load\"]\n   core_dir = \"../src\"\n   supp_dir = \".\"\n   describe \"load\", ->\n      context \"when supp_files isn't exist\",->\n         before ->\n            core_files.forEach (v)-> (-> require \"#{core_dir}/#{v}\").should.not.throw()\n            supp_files.forEach (v)-> (-> require \"#{supp_dir}/#{v}\").should.throw()\n            delete require.cache[k] for k of require.cache\n         it \"should is pushed in require.cache\", ->\n            require './at_caller'\n            core_files.forEach (v)-> Object.keys(require.cache).should.have.matchAny(new RegExp \"#{core_dir}/#{v}.+$\")\n      context \"when supp_files exist\",->\n         before ->\n            core_files.forEach (v)-> (-> require \"#{core_dir}/#{v}\").should.not.throw()\n            supp_files.forEach (v)-> fs.openSync(\"#{supp_dir}/#{v}.js\",'w')\n            delete require.cache[k] for k of require.cache\n         after ->\n            supp_files.forEach (v)-> fs.unlinkSync(\"#{supp_dir}/#{v}.js\")\n         it \"should is pushed in require.cache\", ->\n            require './at_caller'\n            supp_files.forEach (v)-> Object.keys(require.cache).should.have.matchAny(new RegExp \"#{supp_dir}/#{v}.+$\")\n#      context \"when file which expected to require is not exist\", ->\n#         it \"should not required\", ->\n#            (-> throw 'wo').should.not.throw()\n#         Object.keys(require.cache).should.have.matchAny(/test/load.js$/)\n#describe \"at_module\", ->\n#   beforeEach -> at_module = require '../src/at_module'\n#   it \"is about FDD\", ->\n#      at_module.should.have.properties('flowRight', 'iterators', 'extendOwn', 'levenshtein')\n#      at_module.u_repeat(5, 'a').should.be.eql(['a', 'a', 'a', 'a', 'a'])\n#describe \"at_function\", ->\n#   describe \"@extend\", ->\n#   describe \"@at\",->\n            ###\n            describe \"at_function\", ->\n               beforeEach -> caller = require './at_caller'\n               describe \"@setAliases(obj)\", ->\n                  target_ctx = testFn: (->), fn_err: (->)\n                  context \"when the obj.key value not present in module.exports's key\", ->\n                     it \"should set aliasName about obj.value which is function in module.exports\", ->\n                        caller.context.setAliases target_ctx, testFn: 'fn'\n                        caller.context.setAliases target_ctx, testFn: 'fn2'\n                        target_ctx.should.not.be.empty\n                        target_ctx.should.have.enumerables('fn', 'fn2')\n                  context \"when the obj.key name present in module.exports\", ->\n                     it \"should throw error\", ->\n                        (-> caller.context.setAliases target_ctx, testFn: 'fn_err').should.throw()\n               describe \"at[variable]\", ->\n                  it \"is about caller's information\", ->\n                     caller.context.should.be.not.empty()\n                     caller.context.moduleName.should.be.eql('at_caller')\n            describe \"caller\", ->\n               caller = require './at_caller'\n               caller_noTDD = require './at_caller_noTDD'\n               context \"when is called by TDD api mocha #caller\", ->\n                  it \"should make module.parent.export.main function to module.parent.export and at is not cashed by nodejs\", ->\n                     caller.should.be.a.Function\n                  it \"should make parent module's var module.parent.export.main function's var\", ->\n                     caller.should.a.Function().which.has.a.property('tag', 'caller')\n                  it \"should have property 'context' which is context\", ->\n                     caller()\n                     caller.should.have.a.property('context')\n                     caller.context.should.have.a.enumerable('isContext').which.is.a.true\n               context \"when is called by node #caller\", ->\n                  it \"should have not property 'context' which is context\", ->\n                     caller_noTDD.should.have.not.a.property('context')\n\n            describe \"caller.context[variable]\", ->\n               caller = require './at_caller'\n               describe \"@[variable]\", ->\n                  it \"should have reference of process.config.at which is accepted globally\", ->\n                     caller.context.G.should.have.a.property('check')\n                  describe \"regex\", ->\n            describe \"caller.context[function]\", ->\n               caller = require './at_caller'\n               describe \"main function\", ->\n                  describe \"@fork\", ->\n                  describe \"@go\", ->\n               describe \"supp function\", ->\n                  context \"when module.parent.exports has supp function\", ->\n                     it \"should have function of context which of supp\", ->\n                        caller.context.should.have.enumerable('supp_fn1').which.is.a.Function\n                        caller.context.should.have.enumerable('supp_fn2').which.is.a.Function\n                  caller_opp = require './at_caller_opp'\n                  context \"when module.parent.exports has not 'supp' function\", ->\n                     it \"should not have function of context wich of supp\", ->\n                        caller_opp.context.should.have.not.enumerable('supp_fn1')\n               describe \"FDD\", ->###\n#      it \"baseCheck\",->\n#      it \"exec\",->\n\n#      it \"should make module.export's var to module.parent.export's var\",->\n\n"]}