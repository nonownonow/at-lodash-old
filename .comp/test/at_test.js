// Generated by CoffeeScript 1.10.0
var caller, should, sinon;

should = require('should');

sinon = require('sinon');

require('should-sinon');

caller = require('./at_caller');

beforeEach(function() {});

afterEach(function() {});

describe("at[module]", function() {
  var at_module;
  at_module = require('../src/at_module');
  it("is about FDD", function() {
    at_module.should.have.properties('flowRight', 'iterators', 'extendOwn');
    caller.context.should.have.properties('flowRight', 'iterators', 'extendOwn').and.have.property('flowRight').which.is.Function;
    return caller.context.u_repeat(5, 'a').should.be.eql(['a', 'a', 'a', 'a', 'a']);
  });
  return it('is about core util', function() {
    caller.context.should.have.property('s').which.have.a.property('levenshtein');
    caller.context.should.have.property('r').which.have.a.property('XRegExp');
    caller.context.should.have.property('log').which.have.a.property('debug');
    caller.context.should.have.property('levenshtein');
    return String.prototype.should.have.property('between');
  });
});

describe("at[function]", function() {
  return describe("@setAliases(obj)", function() {
    var target;
    target = {
      testFn: (function() {}),
      fn_err: (function() {})
    };
    caller.context.setAliases(target, {
      testFn: 'fn'
    });
    caller.context.setAliases(target, {
      testFn: 'fn2'
    });
    context("when the obj.key value not present in module.exports's key", function() {
      return it("should set aliasName about obj.value which is function in module.exports", function() {
        target.should.not.be.empty;
        return target.should.have.enumerables('fn', 'fn2');
      });
    });
    return context("when the obj.key name present in module.exports", function() {
      return it("should throw error", function() {
        return (function() {
          return caller.context.setAliases(target, {
            testFn: 'fn_err'
          });
        }).should["throw"]();
      });
    });
  });
});

describe("at[variable]", function() {
  return it("is about caller's information", function() {
    caller.context.should.be.not.empty();
    return caller.context.moduleName.should.be.eql('at_caller');
  });
});

describe("caller", function() {
  var caller_noTDD;
  caller_noTDD = require('./at_caller_noTDD');
  context("when is called by TDD api mocha #caller", function() {
    it("should make module.parent.export.main function to module.parent.export and at is not cashed by nodejs", function() {
      return caller.should.be.a.Function;
    });
    it("should make parent module's var module.parent.export.main function's var", function() {
      return caller.should.a.Function().which.has.a.property('tag', 'caller');
    });
    return it("should have property 'context' which is context", function() {
      caller();
      caller.should.have.a.property('context');
      return caller.context.should.have.a.enumerable('isContext').which.is.a["true"];
    });
  });
  return context("when is called by node #caller", function() {
    return it("should have not property 'context' which is context", function() {
      return caller_noTDD.should.have.not.a.property('context');
    });
  });
});

describe("caller.context[variable]", function() {
  return describe("@[variable]", function() {
    it("should have reference of process.config.at which is accepted globally", function() {
      return caller.context.G.should.have.a.property('check');
    });
    return describe("regex", function() {});
  });
});

describe("caller.context[function]", function() {
  describe("main function", function() {
    describe("@fork", function() {});
    return describe("@go", function() {});
  });
  describe("supp function", function() {
    var caller_opp;
    context("when module.parent.exports has supp function", function() {
      return it("should have function of context which of supp", function() {
        caller.context.should.have.enumerable('supp_fn1').which.is.a.Function;
        return caller.context.should.have.enumerable('supp_fn2').which.is.a.Function;
      });
    });
    caller_opp = require('./at_caller_opp');
    return context("when module.parent.exports has not 'supp' function", function() {
      return it("should not have function of context wich of supp", function() {
        return caller_opp.context.should.have.not.enumerable('supp_fn1');
      });
    });
  });
  return describe("FDD", function() {});
});

//# sourceMappingURL=at_test.js.map
